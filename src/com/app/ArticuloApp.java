
package com.app;

import com.entidades.Articulo;
import com.entidades.Tipo;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import org.hibernate.query.Query;
import util.HibernateUtil;

/**
 *
 * @author Catherin
 */
public class ArticuloApp extends javax.swing.JDialog {

    /**
     * Creates new form ArticuloApp
     */
    public ArticuloApp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        arranque();
    }
    
    private Session st;
    private DefaultTableModel model;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbTipo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPrecComp = new javax.swing.JTextField();
        txtPrecVen = new javax.swing.JTextField();
        txtPorc = new javax.swing.JTextField();
        txtCan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnInforme = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel1.setText("ARTICULOS");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de Articulos"));

        jLabel2.setText("Id");

        jLabel3.setText("Descripción");

        jLabel4.setText("Tipo");

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar tipo..." }));

        jLabel5.setText("Precio de Compra");

        jLabel6.setText("Precio de Venta");

        jLabel7.setText("Porcentaje");

        jLabel8.setText("Cantidad");

        txtPrecComp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecCompFocusLost(evt);
            }
        });
        txtPrecComp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecCompKeyTyped(evt);
            }
        });

        txtPorc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcFocusLost(evt);
            }
        });
        txtPorc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPorcKeyTyped(evt);
            }
        });

        txtCan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCanKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrecComp, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPorc, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(txtPrecVen, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(txtCan, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecVen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPorc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Descripción", "Tipo", "Precio Vta."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArticulos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArticulosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblArticulos);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnNuevo.setText("Nuevo");
        btnNuevo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel2.add(btnNuevo);

        btnGuardar.setText("Guardar");
        btnGuardar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel2.add(btnGuardar);

        btnEditar.setText("Editar");
        btnEditar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEditar);

        btnEliminar.setText("Eliminar");
        btnEliminar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminar);

        btnInforme.setText("Informe");
        btnInforme.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel2.add(btnInforme);

        btnCancelar.setText("Cancelar");
        btnCancelar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel2.add(btnCancelar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(204, 204, 204))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblArticulosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArticulosMouseClicked
        obtenerTabla();
    }//GEN-LAST:event_tblArticulosMouseClicked

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        nuevo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        editar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        arranque();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtCanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCanKeyTyped
        int e = evt.getKeyChar();
        if (!Character.isDigit(e) && e != evt.VK_DELETE && e != evt.VK_BACK_SPACE && e != evt.VK_ENTER){
            evt.consume();
            JOptionPane.showMessageDialog(this, "Solo números");
        }
    }//GEN-LAST:event_txtCanKeyTyped

    private void txtPorcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcKeyTyped
        int d = evt.getKeyChar();
        if (!Character.isDigit(d) && d != evt.VK_DELETE && d != evt.VK_BACK_SPACE && d != evt.VK_ENTER){
            evt.consume();
            JOptionPane.showMessageDialog(this, "Solo números");
        }else if(!txtPrecVen.getText().isEmpty()&& d == evt.VK_ENTER){
            calcular();
        }
    }//GEN-LAST:event_txtPorcKeyTyped

    private void txtPorcFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcFocusLost
        calcular();
    }//GEN-LAST:event_txtPorcFocusLost

    private void txtPrecCompKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecCompKeyTyped
        int c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != evt.VK_DELETE && c != evt.VK_BACK_SPACE && c != evt.VK_ENTER){
            evt.consume();
            JOptionPane.showMessageDialog(this, "Solo números");
        }else if(!txtPorc.getText().isEmpty() && c == evt.VK_ENTER){
            calcular();
        }
    }//GEN-LAST:event_txtPrecCompKeyTyped

    private void txtPrecCompFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecCompFocusLost
        calcular();
    }//GEN-LAST:event_txtPrecCompFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArticuloApp dialog = new ArticuloApp(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnInforme;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblArticulos;
    private javax.swing.JTextField txtCan;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtPorc;
    private javax.swing.JTextField txtPrecComp;
    private javax.swing.JTextField txtPrecVen;
    // End of variables declaration//GEN-END:variables

    private void limpiar(){
        txtId.setText(null);
        txtDescripcion.setText(null);
        cbTipo.setSelectedIndex(-1);
        txtPrecComp.setText(null);
        txtPrecVen.setText(null);
        txtPorc.setText(null);
        txtCan.setText(null);
        btnGuardar.setText("Guardar");
    }
    
    private void arranque() {
        cargarCombo();
        txtId.setEnabled(false);
        txtDescripcion.setEnabled(false);
        cbTipo.setEnabled(false);
        txtPrecComp.setEnabled(false);
        txtPrecVen.setEnabled(false);
        txtPorc.setEnabled(false);
        limpiar();
        txtCan.setEnabled(false);
        btnGuardar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnInforme.setEnabled(true);
        btnNuevo.setEnabled(true);
        btnGuardar.setText("Guardar");
        tblArticulos.setEnabled(true);
        defaultTableModel();
        cargarTabla();
    }

    private void cargarTabla() {
        st = HibernateUtil.getSessionFactory().openSession();
        st.beginTransaction();
        List<Articulo> lista = (List<Articulo>)st.createQuery("From Articulo").list();
        for(Articulo articuloList : lista){
            model.addRow(new Object[]{
                articuloList.getId(),articuloList.getDes(),articuloList.getTipo().getDes(),articuloList.getPve()
            });
        }
        st.getTransaction().commit();
        st.close();
    }

    private void nuevo() {
        limpiar();
        btnNuevo.setEnabled(false);
        btnGuardar.setEnabled(true);
        txtDescripcion.setEnabled(true);
        cbTipo.setEnabled(true);
        txtPrecComp.setEnabled(true);
        //txtPrecVen.setEnabled(true);
        txtPorc.setEnabled(true);
        txtCan.setEnabled(true);
        txtId.setText("Auto");
    }

    private void guardar() {
        st = HibernateUtil.getSessionFactory().openSession();
        if(txtDescripcion.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Rellene Descripción del Artículo.");   
        }
        else{
            if(cbTipo.getSelectedIndex()==-1){
                JOptionPane.showMessageDialog(null, "Rellene Tipo de Artículo.");
            }
            else{
                if(txtPrecComp.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Indique el Precio de compra.");
                }
                else{
                    if(txtPorc.getText().isEmpty()){
                        JOptionPane.showMessageDialog(null, "Rellene porcentaje de ganancia.");
                    }
                    else{
                        if(txtPrecVen.getText().isEmpty()){
                            JOptionPane.showMessageDialog(null, "Rellene precio de venta.");
                        }
                        else{
                            if(txtCan.getText().isEmpty()){
                                JOptionPane.showMessageDialog(null, "Rellene la cantidad.");
                            }
                            else{
                                if(btnGuardar.getText().equals("Guardar")){
                                    try {
                                        String desArt = txtDescripcion.getText();
                                        Object selectedItem = cbTipo.getSelectedItem();
                                        Tipo retornoTipo = retornoTipo(selectedItem.toString());
                                        int pCompra = 0;
                                        try {
                                            pCompra = Integer.parseInt(txtPrecComp.getText());
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Precio de compra debe ser numérico.");
                                            st.close();
                                            return;
                                        }
                                        int pVenta = 0;
                                        try {
                                            pVenta = Integer.parseInt(txtPrecVen.getText());
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Precio de venta debe ser numérico.");
                                            st.close();
                                            return;
                                        }
                                        int porcentaje = 0;
                                        try {
                                            porcentaje = Integer.parseInt(txtPorc.getText());
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Porcentaje debe ser numérico.");
                                            st.close();
                                            return;
                                        }
                                        int cantidad = 0;
                                        try {
                                            cantidad = Integer.parseInt(txtCan.getText());
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Cantidad debe ser numérico.");
                                            st.close();
                                            return;
                                        }
                                        Articulo art = new Articulo();
                                        art.setDes(desArt);
                                        art.setTipo(retornoTipo);
                                        art.setPco(pCompra);
                                        art.setPve(pVenta);
                                        art.setPor(porcentaje);
                                        art.setCan(cantidad);
                                        retornoTipo.getArticulos().add(art);
                                        st.save(art);
                                        st.update(retornoTipo);
                                        st.getTransaction().commit();
                                        st.close();
                                        JOptionPane.showMessageDialog(null, "Artículo guardado correctamente.");
                                        arranque();
                                    } catch (Exception e) {                                   
                                        JOptionPane.showMessageDialog(null, "Error guardando");
                                        e.printStackTrace();
                                    }
                                }
                                else{
                                    String desArt = txtDescripcion.getText();
                                    Object selectedItem = cbTipo.getSelectedItem();
                                    Tipo retornoTipo = retornoTipo(selectedItem.toString());
                                    int pCompra = 0;
                                    try {
                                        pCompra = Integer.parseInt(txtPrecComp.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Precio de compra debe ser numérico.");
                                        st.close();
                                        return;
                                    }
                                    int pVenta = 0;
                                    try {
                                        pVenta = Integer.parseInt(txtPrecVen.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Precio de venta debe ser numérico.");
                                        st.close();
                                        return;
                                    }
                                    int porcentaje = 0;
                                    try {
                                        porcentaje = Integer.parseInt(txtPorc.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Porcentaje debe ser numérico.");
                                        st.close();
                                        return;
                                    }
                                    int cantidad = 0;
                                    try {
                                        cantidad = Integer.parseInt(txtCan.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Cantidad debe ser numérico.");
                                        st.close();
                                        return;
                                    }
                                    int parseInt = Integer.parseInt(txtId.getText());
                                    Articulo art =(Articulo) st.load(Articulo.class, parseInt);
                                    art.setDes(desArt);
                                    art.setTipo(retornoTipo);
                                    art.setPco(pCompra);
                                    art.setPve(pVenta);
                                    art.setPor(porcentaje);
                                    art.setCan(cantidad);
                                    retornoTipo.getArticulos().add(art);
                                    st.update(art);
                                    st.update(retornoTipo);
                                    st.getTransaction().commit();
                                    st.close();
                                    JOptionPane.showMessageDialog(null, "Artículo actualizado correctamente.");
                                    arranque();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    private void editar() {
        btnGuardar.setEnabled(true);
        txtDescripcion.setEnabled(true);
        cbTipo.setEnabled(true);
        txtPrecComp.setEnabled(true);
        //txtPrecVen.setEnabled(true);
        txtPorc.setEnabled(true);
        txtCan.setEnabled(true);
        btnEliminar.setEnabled(false);
        tblArticulos.setEnabled(false);
        btnGuardar.setText("Actualizar");
    }

    private void eliminar() {
        int opc = JOptionPane.showConfirmDialog(null, "¿Desea eliminar este Artículo?", "Eliminación de Registro", JOptionPane.YES_NO_OPTION);
        if(opc == 1){
            JOptionPane.showMessageDialog(null, "Registro no eliminado.");
        }
        else{
            st = HibernateUtil.getSessionFactory().openSession();
            st.beginTransaction();
            int selectedRow = tblArticulos.getSelectedRow();
            Object valueAt = model.getValueAt(selectedRow, 0);
            int idArt = Integer.parseInt(valueAt.toString());
            Articulo art = (Articulo)st.load(Articulo.class, idArt);
            st.delete(art);
            st.getTransaction().commit();
            st.close();
            JOptionPane.showMessageDialog(null, "Registro eliminado.");
            arranque();
        }
    }

    private void cargarCombo() {
        cbTipo.removeAllItems();
        st = HibernateUtil.getSessionFactory().openSession();
        st.beginTransaction();
        List<Tipo> lista = (List<Tipo>)st.createQuery("From Tipo").list();
        for(Tipo tipoList : lista){
            cbTipo.addItem(tipoList.getDes());
        }
        st.getTransaction().commit();
        st.close();
    }

    private void defaultTableModel() {
        tblArticulos.getColumnModel().getColumn(0).setPreferredWidth(15);
        tblArticulos.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblArticulos.getColumnModel().getColumn(2).setPreferredWidth(80);
        tblArticulos.getColumnModel().getColumn(3).setPreferredWidth(80);
        model = (DefaultTableModel)tblArticulos.getModel();
        model.setNumRows(0);
    }

    public Tipo retornoTipo(String desT) {
        Tipo tipRet = null;
        String desTipo = desT;
        try {
            st = HibernateUtil.getSessionFactory().getCurrentSession();
            st.beginTransaction();
            Query query = st.createQuery("From Tipo t Where t.des = :tipo");
            query.setParameter("tipo", desTipo);
            try {
                tipRet = (Tipo)query.uniqueResult();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Hay más articulos de tipo: " + desTipo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al recuperar valor");
            e.printStackTrace();
        }
        return tipRet;
     }

    private void obtenerTabla() {
        st = HibernateUtil.getSessionFactory().openSession();
        st.beginTransaction();
        int selectedRow = tblArticulos.getSelectedRow();
        int idArt = Integer.parseInt(String.valueOf(model.getValueAt(selectedRow, 0)));
        Articulo art = (Articulo)st.load(Articulo.class, idArt);
        txtId.setText(String.valueOf(art.getId()));
        txtDescripcion.setText(String.valueOf(art.getDes()));
        txtPrecComp.setText(String.valueOf(art.getPco()));
        txtPrecVen.setText(String.valueOf(art.getPve()));
        txtPorc.setText(String.valueOf(art.getPor()));
        txtCan.setText(String.valueOf(art.getCan()));
        cbTipo.setSelectedItem(art.getTipo().getDes());
        btnEditar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnNuevo.setEnabled(false);
        btnGuardar.setText("Actualizar");
        st.getTransaction().commit();
        st.close();
    }

    private void calcular() {
        int total = 0;
        int pCompra = 0;
        int porcent = 0;
        if(txtPrecComp.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "No se ha establecido precio de compra.");
            txtPrecComp.setRequestFocusEnabled(true);
        }
        else{
            if(!txtPorc.getText().isEmpty()){
                try {
                    pCompra = Integer.parseInt(txtPrecComp.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,txtPrecComp.getText() + " No es numérico.");
                }
                try {
                    porcent = Integer.parseInt(txtPorc.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,txtPorc.getText() + " No es numérico.");
                }
                try {
                    total = (pCompra + ((pCompra*porcent)/100));
                    txtPrecVen.setText(String.valueOf(total));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: Datos incorrectos.");
                }
            }        
        }   
    }
}
