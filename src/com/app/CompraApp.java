
package com.app;

import com.entidades.Articulo;
import com.entidades.CompraCab;
import com.entidades.CompraDet;
import com.entidades.Funcionario;
import com.entidades.Proveedor;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import util.HibernateUtil;

/**
 *
 * @author Catherin
 */
public class CompraApp extends javax.swing.JDialog {

    /**
     * Creates new form CompraApp
     */
    public CompraApp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null); //Centra el formulario
        arranque(); //Prepara el formulario
    }
    
    private Session st;
    private DefaultTableModel model;
    private int var, idArtRep, numCompra; //Variables auxiliares

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNum = new javax.swing.JTextField();
        txtFec = new javax.swing.JTextField();
        txtHor = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNomF = new javax.swing.JTextField();
        txtIdF = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDesP = new javax.swing.JTextField();
        txtIdP = new javax.swing.JTextField();
        txtCuitP = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDesA = new javax.swing.JTextField();
        txtIdA = new javax.swing.JTextField();
        txtPComA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtStockA = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCanA = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtTotA = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCom = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        txtTotalG = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel1.setText("FORMULARIO DE COMPRAS");

        jLabel2.setText("Número");

        jLabel3.setText("Fecha");

        jLabel4.setText("Hora");

        txtNum.setEditable(false);

        txtFec.setEditable(false);

        txtHor.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtFec, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtHor, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Funcionario"));

        jLabel5.setText("Id");

        jLabel6.setText("Nombre");

        txtNomF.setEditable(false);

        txtIdF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdFKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtIdF, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 179, Short.MAX_VALUE))
                    .addComponent(txtNomF))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Proveedor"));

        jLabel7.setText("Id");

        jLabel8.setText("Descripción");

        txtDesP.setEditable(false);

        txtIdP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdPKeyPressed(evt);
            }
        });

        txtCuitP.setEditable(false);

        jLabel15.setText("CUIT");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtIdP, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDesP, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCuitP, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCuitP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDesP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Artículo"));

        jLabel9.setText("Id");

        jLabel10.setText("Descripción");

        txtDesA.setEditable(false);

        txtIdA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdAKeyPressed(evt);
            }
        });

        txtPComA.setEditable(false);

        jLabel11.setText("Precio de Compra");

        txtStockA.setEditable(false);

        jLabel12.setText("Stock");

        txtCanA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCanAKeyPressed(evt);
            }
        });

        jLabel13.setText("Cantidad");

        jLabel14.setText("Total");

        txtTotA.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(txtIdA, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(txtDesA, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(txtPComA, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStockA, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCanA, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTotA, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDesA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPComA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStockA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCanA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblCom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Artículo", "Precio de Compra", "Cantidad", "Total"
            }
        ));
        jScrollPane1.setViewportView(tblCom);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtTotalG.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(72, 72, 72)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(btnNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelar)
                        .addGap(53, 53, 53)
                        .addComponent(txtTotalG)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(16, 16, 16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)
                        .addGap(16, 16, 16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevo)
                        .addComponent(btnGuardar)
                        .addComponent(btnCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtTotalG, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        nuevo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        arranque();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        agregar();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtIdFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdFKeyPressed
        //Uso del Evento KeyPressed dentro del campo de texto "id".
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            buscarFuncionario();
        }
    }//GEN-LAST:event_txtIdFKeyPressed

    private void txtIdPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdPKeyPressed
        //Uso del Evento KeyPressed dentro del campo de texto "idProv".
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            buscarProveedor();
        }
    }//GEN-LAST:event_txtIdPKeyPressed

    private void txtIdAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdAKeyPressed
        //Uso del Evento KeyPressed dentro del campo de texto "idArt".
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            buscarArticulo();
        }
    }//GEN-LAST:event_txtIdAKeyPressed

    private void txtCanAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCanAKeyPressed
        //Uso del Evento KeyPressed dentro del campo de texto "cantidad".
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            calcularParcial();
        }
    }//GEN-LAST:event_txtCanAKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CompraApp dialog = new CompraApp(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCom;
    private javax.swing.JTextField txtCanA;
    private javax.swing.JTextField txtCuitP;
    private javax.swing.JTextField txtDesA;
    private javax.swing.JTextField txtDesP;
    private javax.swing.JTextField txtFec;
    private javax.swing.JTextField txtHor;
    private javax.swing.JTextField txtIdA;
    private javax.swing.JTextField txtIdF;
    private javax.swing.JTextField txtIdP;
    private javax.swing.JTextField txtNomF;
    private javax.swing.JTextField txtNum;
    private javax.swing.JTextField txtPComA;
    private javax.swing.JTextField txtStockA;
    private javax.swing.JTextField txtTotA;
    private javax.swing.JTextField txtTotalG;
    // End of variables declaration//GEN-END:variables

    private void limpiar(){
        txtNum.setText(null);
        txtFec.setText(null);
        txtHor.setText(null);
        txtIdF.setText(null);
        txtNomF.setText(null);
        txtIdP.setText(null);
        txtDesP.setText(null);
        txtCuitP.setText(null);
        txtIdA.setText(null);
        txtDesA.setText(null);
        txtPComA.setText(null);
        txtStockA.setText(null);
        txtCanA.setText(null);
        txtTotA.setText(null);
        txtTotalG.setText(null);
        tableModel();
    }
    
    private void limpiarCampos() {
        //Limpia campo de datos..
        txtIdA.setText(null);
        txtDesA.setText(null);
        txtPComA.setText(null);
        txtStockA.setText(null);
        txtCanA.setText(null);
        txtTotA.setText(null);
        txtIdF.setEnabled(false);
        txtIdP.setEnabled(false);
    }
    
    private void arranque() {
        limpiar();
        btnNuevo.setEnabled(true);
        btnAgregar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnGuardar.setEnabled(false);
        txtIdF.setEnabled(false);
        txtIdP.setEnabled(false);
        txtIdA.setEnabled(false);
        txtCanA.setEnabled(false);
    }

    private void nuevo() {
        //Configuramos acciones, habilitamos campos al presionar el botón nuevo
        txtIdF.setEnabled(true);
        txtIdP.setEnabled(true);
        txtIdA.setEnabled(true);
        txtCanA.setEnabled(true);
        btnAgregar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);
        btnNuevo.setEnabled(false);
        txtIdF.requestFocus();
        Calendar cal = Calendar.getInstance();
        String calString = retornarFecha(cal);
        String calHora = retornarHora(cal);
        txtFec.setText(calString);
        txtNum.setText(String.valueOf(numCompra()));    
        txtHor.setText(calHora);
    }
    
    private int numCompra(){
        //Utilizamos el método siguiente para conseguir en número de compra...
        //correspondiente
        numCompra = 0;
        st = HibernateUtil.getSessionFactory().openSession();
        st.beginTransaction();
        List<CompraCab> lista = (List<CompraCab>)st.createQuery("From CompraCab").list();
        for (CompraCab compraCab : lista) {
            numCompra = compraCab.getNum() + 1;
        }
        if(numCompra==0){
            numCompra=1;
        }
        st.getTransaction().commit();
        st.close();
        return numCompra;
    }

    private void agregar() {
        //Método llamado desde el botón agregar, primeramente comprobamos que los datos sean correctos,
        //que los campos no esten vacios, que no se repitan datos.
        if(txtIdF.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Seleccione un funcionario.");
        }else{
            if(txtIdP.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Seleccione un proveedor.");
            }else{
                if(txtIdA.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Seleccione un articulo.");
                }else{
                    if(txtCanA.getText().isEmpty()){
                        JOptionPane.showMessageDialog(null, "Indique una cantidad.");
                    }else{
                        verificar();
                        if(var>=1){
                            int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Artículo ya Agregado. \n¿Desea sumar la cantidad?", 
                                    "Mensaje del Sistema.", JOptionPane.YES_NO_OPTION);
                            if(showConfirmDialog==0){
                               sumarRepetido(); 
                               calcular();
                               confirmAgregar();
                               limpiarCampos();
                            }
                            else{
                                limpiarCampos();
                                txtIdA.requestFocus();
                            }
                        }
                        else{
                                model.addRow(new Object[]{
                                txtIdA.getText(),txtDesA.getText(),txtPComA.getText(),txtCanA.getText(),txtTotA.getText()
                                });                    
                                calcular();
                                confirmAgregar();
                                limpiarCampos(); 
                        }
                    }
                }
            }
        }
    }

    private void eliminar() {
        //Permite al usuario seleccionar una fila específica de la table y eliminarla.
        if(tblCom.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna fila de la tabla.");  
        }else{
            int opc = JOptionPane.showConfirmDialog(null, "¿Eliminar fila seleccionada?", "Mensaje del Sistema", JOptionPane.YES_NO_OPTION);
            if(opc == 0){
                int sel = tblCom.getSelectedRow();
                model.removeRow(sel);
                txtIdA.requestFocus();
            }
            else{
                txtIdA.requestFocus();
            }
        }
    }

    private void guardar() {
        //Metodo que nos permite almacenar los datos intruducidos en la base de datos,
        //los datos se guardan en la tabla CompraCab y CompraDet.
        //la primera almacena la cabecera de compra y la segunda los detalles.
        if(txtIdF.getText().isEmpty() ||txtIdP.getText().isEmpty() ){
            JOptionPane.showMessageDialog(null, "Faltan datos para guardar. Verifique.");
        }else{
            if(tblCom.getRowCount()==0){
                JOptionPane.showMessageDialog(null, "No hay datos de compra para guardar.");
            } else{
                int opc = JOptionPane.showConfirmDialog(null, "¿Desea guardar esta compra?", "Mensaje del Sistema", JOptionPane.YES_NO_OPTION);
                if(opc == 0){
                    try {
                        st = HibernateUtil.getSessionFactory().openSession();
                        st.beginTransaction();
                        CompraCab compra = new CompraCab();
                        int idFun = Integer.parseInt(txtIdF.getText());
                        int idPrv = Integer.parseInt(txtIdP.getText());
                        long totalCompra = Long.parseLong(txtTotalG.getText());
                        Funcionario funcionario = (Funcionario)st.load(Funcionario.class, idFun);
                        Proveedor proveedor = (Proveedor)st.load(Proveedor.class, idPrv);
                        Calendar fechaCompra = retornarCalendar(txtFec.getText());
                        String horaCompra = txtHor.getText();
                        compra.setNum(Integer.valueOf(txtNum.getText()));
                        compra.setProveedor(proveedor);
                        compra.setFuncionario(funcionario);
                        compra.setFecha(fechaCompra);
                        compra.setHora(horaCompra);
                        compra.setTotal(totalCompra);
                        funcionario.getCompraCabs().add(compra);
                        proveedor.getCompraCabs().add(compra);
                        int rowCount = tblCom.getRowCount();
                        int[] idArti = new int[rowCount];
                        int[] cantCompra = new int[rowCount];
                        for (int i = 0; i < tblCom.getRowCount(); i++) {
                            CompraDet detalleCompra = new CompraDet();
                            int idArticulo = Integer.parseInt(String.valueOf(model.getValueAt(i, 0)));
                            idArti[i] = idArticulo;
                            Articulo ventaArticulo = (Articulo)st.load(Articulo.class, idArticulo);
                            int cantidadCompra = Integer.parseInt(String.valueOf(model.getValueAt(i, 3)));
                            cantCompra[i]= cantidadCompra;
                            int importeVenta = Integer.parseInt(String.valueOf(model.getValueAt(i, 4)));
                            detalleCompra.setArticulo(ventaArticulo);
                            detalleCompra.setCantidad(cantidadCompra);
                            detalleCompra.setImporte(importeVenta);
                            detalleCompra.setCabecera(compra);
                            compra.getCompraDets().add(detalleCompra);
                        }
                        st.save(compra);
                        st.getTransaction().commit();
                        st.close();
                        for (int i = 0; i < idArti.length; i++) {
                            actualizarStock(cantCompra[i], idArti[i]);
                        }
                        arranque();
                        JOptionPane.showMessageDialog(null, "Compra guardada correctamente.");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error guardando compra. Verifique.");
                    }

                }else{                
                    txtIdA.requestFocus();
                }
            }
        }
    }

    private void buscarFuncionario() {
        int idFunc = 0;
        try {
            try {
               idFunc = Integer.parseInt(txtIdF.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Id debe ser numérico.");
            }
            st = HibernateUtil.getSessionFactory().openSession();
            st.beginTransaction();
            Funcionario funcio = (Funcionario)st.load(Funcionario.class, idFunc);
            txtNomF.setText(funcio.getNombres() + " " + funcio.getApellidos());
            txtIdP.requestFocus();
            st.getTransaction().commit();
            st.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se encontró el funcionario: " + idFunc);
        }    
    }

    private void buscarProveedor() {
        int idPrv = 0;
        try {
            try {
               idPrv = Integer.parseInt(txtIdP.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Id debe ser numérico.");
            }
            st = HibernateUtil.getSessionFactory().openSession();
            st.beginTransaction();
            Proveedor proveedor = (Proveedor)st.load(Proveedor.class, idPrv);
            txtDesP.setText(proveedor.getDes());
            txtCuitP.setText(proveedor.getCuit());
            txtIdA.requestFocus();
            st.getTransaction().commit();
            st.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se encontró el proveedor: " + idPrv);
        }  
    }

    private void buscarArticulo() {
        //Método para buscar artículos por el "id",
        //este método se llama desde un evento KeyPressed.
        int idArti = 0;
        try {
            try {
               idArti = Integer.parseInt(txtIdA.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Id debe ser numérico.");
            }
            st = HibernateUtil.getSessionFactory().openSession();
            st.beginTransaction();
            Articulo art = (Articulo)st.load(Articulo.class, idArti);
            txtDesA.setText(art.getDes());
            txtPComA.setText(String.valueOf(art.getPco()));
            txtStockA.setText(String.valueOf(art.getCan()));
            st.getTransaction().commit();
            st.close();
            txtCanA.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se encontró el artículo: " + idArti);
        } 
    }

    private void calcularParcial() {
        //Lo siguiente nos permite calcular el total para cada artículo,
        //esto tomando en cuenta total de compra y precio de compra.
        int canCompra = 0;
        int pCompra = 0;
        int totalParcial = 0 ;
        try {
            canCompra = Integer.parseInt(txtCanA.getText());
            pCompra = Integer.parseInt(txtPComA.getText());       
            totalParcial = canCompra * pCompra;
            txtTotA.setText(String.valueOf(totalParcial)); 
            btnAgregar.requestFocus();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Se requieren datos numéricos.");
        }
    }

    private void tableModel() {
        //Configuramos el jTable utilizando DefaultTableModel
        tblCom.getColumnModel().getColumn(0).setPreferredWidth(15);
        tblCom.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblCom.getColumnModel().getColumn(2).setPreferredWidth(80);
        tblCom.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblCom.getColumnModel().getColumn(4).setPreferredWidth(80);
        model = (DefaultTableModel)tblCom.getModel();
        model.setNumRows(0);
    }

    private String retornarFecha(Calendar cal) {
        //A este método le pasamos un objeto calendar (cal) y lo convierte en formato String-Fecha
        String fecha = null;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (cal != null) {
            fecha = sdf.format(cal.getTime());
        }
        return fecha;
    }

    private String retornarHora(Calendar cal) {
        //A este método le pasamos un objeto calendar (cal) y lo convierte en formato String-hora
        String hora = null;
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        if (cal != null) {
            hora = sdf.format(cal.getTime());
        }
        return hora;
    }
    
    public Calendar retornarCalendar(String fecha){
        //Se le pasa como argumento un String-Fecha y la convierte en objeto calendar.
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar cal = Calendar.getInstance();    
        try {
            cal.setTime(sdf.parse(fecha));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Error: compruebe formato de fecha: " + ex);  
        }
        return cal;
    }

    private void verificar() {
        //Método para verificar que no se duplique el mismo artículo en la tabla,
        //para ello se comprueba el id del artículo.
        var = 0;
        int idAr = Integer.parseInt(txtIdA.getText());
        if(tblCom.getRowCount()>=1){
            for (int i = 0; i < tblCom.getRowCount(); i++) {
                String valueAt = model.getValueAt(i, 0).toString();
                int parseInt = Integer.parseInt(valueAt);
                if(idAr == parseInt){
                    var = 1;
                    idArtRep = i;
                }        
            }        
        } 
    }

    private void sumarRepetido() {
        //Si se repite el ingreso de un artículo específico,se puede optar por sumar la cantidad de compra,
        //este método localiza el id del artículo específico y aumenta la cantidad de la
        //compra sumandola.
        int cantidad = Integer.parseInt(txtCanA.getText());
        int total = Integer.parseInt(txtTotA.getText());
        Object cantAnteriorO = model.getValueAt(idArtRep, 3);
        Object totalAnteriorO = model.getValueAt(idArtRep, 4);
        int cantAnterior = Integer.parseInt(cantAnteriorO.toString());
        int totalAnterior = Integer.parseInt(totalAnteriorO.toString());
        int cantNuevo = cantidad + cantAnterior;
        int totalNuevo = total + totalAnterior;
        model.setValueAt(cantNuevo, idArtRep, 3);
        model.setValueAt(totalNuevo, idArtRep, 4);        
    }

    private void calcular() {
        //Método para calcular el total de la compra, obteniendo datos del jtable.
        int totalG = 0;
        for (int i = 0; i < tblCom.getRowCount(); i++) {
            String valueAt = model.getValueAt(i, 4).toString();
            totalG += Integer.parseInt(valueAt);
        }
        txtTotalG.setText(String.valueOf(totalG));
    }

    private void confirmAgregar() {
        //Método que pregunta al usuario si desea agregar más artículo a la lista.
        int opc = JOptionPane.showConfirmDialog(null, "¿Agregar más Articulos?", "Mensaje del Sistema", JOptionPane.YES_NO_OPTION);
        if(opc == 0){
            txtIdA.requestFocus();
        }
        else{
            btnGuardar.requestFocus();
        }
    }

    private void actualizarStock(int cantidadCompra, int idArticulo) {
        //Despúes que el proceso de guardado se haga de forma correcta, 
        //se actualiza el stock de los artículos comprados.
        st = HibernateUtil.getSessionFactory().openSession();
        st.beginTransaction();
        Articulo actualizar = (Articulo)st.load(Articulo.class, idArticulo);
        int temp = actualizar.getCan() + cantidadCompra;
        actualizar.setCan(temp);
        st.update(actualizar);
        st.getTransaction().commit();
        st.close();
    }
    
}
